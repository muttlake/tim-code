@{
    ViewData["Title"] = "Add a Pizza Page";
}


@model AdWorks.MVC.Models.PizzaViewModel

<header class="col-md-12">
    <h3>Add a Pizza to Your Order</h3>
</header>
<div class="col-md-12">
    <form asp-controller="Pizza" method="post">
        <h4>Crust</h4>
        <div class="form-group">
            @foreach (KeyValuePair<int, string> crust in Model.Crusts)
            {
                <div>
                    <label>@crust.Value</label>
                    <input asp-for="CrustID" type="radio" id="" value=@crust.Key />
                </div>
            }
        </div>
        <h4>Sauce</h4>
        <div class="form-group">
            @foreach (KeyValuePair<int, string> sauce in Model.Sauces)
            {
                <div>
                    <label>@sauce.Value</label>
                    <input asp-for="SauceID" type="radio" id="" value=@sauce.Key />
                </div>
            }
        </div>
        <h4>Cheeses</h4>
        <div class="form-group">
            <div class="container">
                @foreach (KeyValuePair<int, string> cheese in Model.Cheeses)
                {
                    <div class="checkbox">
                        <label>
                            <input type="checkbox"
                                    name="Cheeses"
                                    value="@cheese.Value" /> @cheese.Key
                        </label>
                    </div>
                }
            </div>
        </div>
        <button type="submit">Choose a Pizza</button>
    </form>
</div>


@* this is a strongly typed view, view is tied to a view model *@


@*@{

}*@

@*@using (@Html.BeginForm())
    {
        @Html.TextBoxFor(m => m.Name)


        foreach (var item in pizzaView.Size)
        {
            @Html.RadioButtonFor(m => item, item.Text);
        }
    }*@

@*<h4>Name</h4>
    <div class="form-group">*@
@*@Html.TextBoxFor(m => m.Name, "Person Name:")*@
@*</div>
    <h4>Sizes</h4> <!-- this property will come back as a list -->
    <div class="form-group">
        @using (@Html.BeginForm())
        {*@
@*@Html.LabelFor(m => m.Sizes.Small); //We were calling metadata of model
    @Html.RadioButtonFor(m => m.Sizes.Small, "Size");
    @Html.LabelFor(m => m.Sizes.Medium);
    @Html.RadioButtonFor(m => m.Sizes.Medium, "Size");
    @Html.LabelFor(m => m.Sizes.Large);
    @Html.RadioButtonFor(m => m.Sizes.Large, "Size");*@

@*@foreach (var @size in Model.Sizes2)
    {
        <label>@size  Whats upppppp</label> //@Model needs a new Model
        <input type="radio" name="size" id="" value=@size />
    }*@
        @*}*@
@*</div>
        <h4>Crusts</h4> <!-- this property will come back as a list -->
        @*<div class="form-group">
            @Html.RadioButtonFor(m => Model.Crust, "Crust")
        </div>
        <h4>Toppings</h4> <!-- this property will come back as a list -->
        <div class="form-group">
            <label></label>
            <form asp-controller="Pizza" method="post">
                <h4>Sizes</h4> <!-- this property will come back as a list -->
                <div class="form-group">
                    @foreach (var @size in Model.Sizes)
                    {
                        <label>@size</label> //@Model needs a new Model
                        <input asp-for="Size" type="radio" name="size" id="" value=@size />
                    }
                </div>
                <h4>Crusts</h4> <!-- this property will come back as a list -->
                <div class="form-group">
                    @foreach (var @crust in Model.Crusts)
                    {
                        <label>@crust</label> //@Model needs a new Model
                        <input asp-for="Crust" type="radio" name="crust" id="" value=@crust />
                    }
                </div>
                @*<input asp-for="Size" type="radio" name="size" id="" value=@size />
                <button type="submit">Submit your Order</button>
            </form>
            @*}
        </div>
    </div>*@


